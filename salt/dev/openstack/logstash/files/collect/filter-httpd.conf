filter {
	if [message] =~ /^[\s]*$/{
		drop{}
	}
	if [type] == "httpd" {
		ruby {
			code => "event['@timestamp'] = event['@timestamp'].localtime('+08:00')"
		}
		if "access" in [tags] {
			grok {
				patterns_dir => "/opt/logstash/patters"
				match => {"message" => "%{HTTPD_ACCESS_LOG}"}
				add_field => [ "received_at", "%{@timestamp}" ]
			}
			date {  
				match => [ "timestamp","dd/MMM/YYYY:HH:mm:ss Z"]
				locale => "en"
			}
			mutate {
				add_field => ["level","UNKNOW"]
				remove_field => "timestamp"
				remove_field => "@version"
				remove_tag => ["access"]
			}
		}
		if "error" in [tags] {
			grok {
				patterns_dir => "/opt/logstash/patters"
				match => {"message" =>"%{HTTPD_ERROR_LOG}"}
				add_field => ["received_at", "%{@timestamp}"]
				add_field => ["timestamp","%{day}/%{mouth}/%{year}:%{time}"]
			}
			date {
				match => [ "timestamp","dd/MMM/YYYY:HH:mm:ss.SSSSSS"]
				locale => "en"
			}
			translate {
				field => "httpd_level"
				dictionary => [
					"emerg","EMERGENCY",
					"alert","ALERT",
					"crit","CRITICAL",
					"error","ERROR",
					"warn","WARNING",
					"notice","NOTICE",
					"info","INFO",
					"debug","DEBUG",
					"trace1","TRACE",
					"trace2","TRACE",
					"trace3","TRACE",
					"trace4","TRACE",
					"trace5","TRACE",
					"trace6","TRACE",
					"trace7","TRACE",
					"trace8","TRACE"
				]
				fallback => "unknown"
				destination => "level"
			}
			mutate {
				remove_tag => ["error"]
				remove_field => "httpd_level"
				remove_field => "@version"
				remove_field => "mouth"
				remove_field => "day"
				remove_field => "time"
				remove_field => "year"
				remove_field => "timestamp"
			}
		}
		if [tags] == [] {
			mutate {
				remove_field => "tags"
			}
		}
	}
}
